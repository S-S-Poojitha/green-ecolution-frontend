/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CalendarImport } from './routes/calendar'
import { Route as IndexImport } from './routes/index'
import { Route as WaypointsIndexImport } from './routes/waypoints/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as WaypointsNewImport } from './routes/waypoints/new'
import { Route as DashboardTreeIndexImport } from './routes/dashboard/tree/index'
import { Route as DashboardTreeTreeIdImport } from './routes/dashboard/tree/$treeId'

// Create/Update Routes

const CalendarRoute = CalendarImport.update({
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WaypointsIndexRoute = WaypointsIndexImport.update({
  path: '/waypoints/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const WaypointsNewRoute = WaypointsNewImport.update({
  path: '/waypoints/new',
  getParentRoute: () => rootRoute,
} as any)

const DashboardTreeIndexRoute = DashboardTreeIndexImport.update({
  path: '/dashboard/tree/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardTreeTreeIdRoute = DashboardTreeTreeIdImport.update({
  path: '/dashboard/tree/$treeId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/waypoints/new': {
      id: '/waypoints/new'
      path: '/waypoints/new'
      fullPath: '/waypoints/new'
      preLoaderRoute: typeof WaypointsNewImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/waypoints/': {
      id: '/waypoints/'
      path: '/waypoints'
      fullPath: '/waypoints'
      preLoaderRoute: typeof WaypointsIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/tree/$treeId': {
      id: '/dashboard/tree/$treeId'
      path: '/dashboard/tree/$treeId'
      fullPath: '/dashboard/tree/$treeId'
      preLoaderRoute: typeof DashboardTreeTreeIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/tree/': {
      id: '/dashboard/tree/'
      path: '/dashboard/tree'
      fullPath: '/dashboard/tree'
      preLoaderRoute: typeof DashboardTreeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  CalendarRoute,
  WaypointsNewRoute,
  DashboardIndexRoute,
  WaypointsIndexRoute,
  DashboardTreeTreeIdRoute,
  DashboardTreeIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calendar",
        "/waypoints/new",
        "/dashboard/",
        "/waypoints/",
        "/dashboard/tree/$treeId",
        "/dashboard/tree/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/waypoints/new": {
      "filePath": "waypoints/new.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    },
    "/waypoints/": {
      "filePath": "waypoints/index.tsx"
    },
    "/dashboard/tree/$treeId": {
      "filePath": "dashboard/tree/$treeId.tsx"
    },
    "/dashboard/tree/": {
      "filePath": "dashboard/tree/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
